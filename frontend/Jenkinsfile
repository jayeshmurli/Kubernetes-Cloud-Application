pipeline {
  
  agent {
    kubernetes {
      // this label will be the prefix of the generated pod's name
      label 'jenkins-agent-my-app'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    component: ci
spec:
  containers:
    - name: jnlp
      env:
        - name: GITHUB_USER
          valueFrom:
            secretKeyRef:
                name: my-secret
                key: github-secret-user
    - name: docker
      image: adoptopenjdk/maven-openjdk11:latest
      command:
        - cat
      tty: true
      volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-sock
    - name: kubectl
      image: lachlanevenson/k8s-kubectl:v1.14.0 # use a version that matches your K8s version
      env:
         - name: DOCKER_USER
           valueFrom:
             secretKeyRef:
                 name: my-secret
                 key: docker-secret-user
      command:
        - cat
      tty: true
    - name: docker-container
      image: docker:latest
      command:
        - cat
      tty: true
      volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-sock    
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
"""
    }
  }
  
  stages {
    stage('Git Clone') {
      steps {
          checkout scm

      }
    }

    
    stage('Build image') {
      steps {
        container('docker-container') {
              script{
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                	 dockerImage = docker.build("$USERNAME/f19-t1-webapp-frontend:${GIT_COMMIT}")
		}
                
              }  
          
        }
      }
    }
    
    

    stage('Push image') {
      
      steps {
        container('docker-container') {
		script{
        	docker.withRegistry('', "dockerhub") {            
 	 	  /* Push the container to the custom Registry */
  		  dockerImage.push()
		}  
		}
        }
      }
    }

    stage('List pods') {
    steps {
      container('kubectl') {
      sh '''
      kubectl -n ui set image deployment/kubernetes-node-server-replicaset-frontend kubernetes-node-server-replicaset-frontend=${DOCKER_USER}/f19-t1-webapp-frontend:${GIT_COMMIT} --record
      '''
        }
    }
  }
  }
}

